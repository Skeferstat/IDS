@page
@using IdsServer.Controllers
@using IdsServer.Library.Models

@{
    ViewData["Title"] = "Baskets";
}

<h2>@ViewData["Title"]</h2>


@(Html.DevExtreme().DataGrid<BasketDto>()
    .DataSource(ds => ds.Mvc()
        .Controller("Baskets")
        .LoadAction("Get")
        .UpdateAction("Update")
        .DeleteAction("Delete") 
        .Key("BasketId")
    )
    .RepaintChangesOnly(true) 
    .Scrolling(x => x.Mode(GridScrollingMode.Virtual)) 
    .RemoteOperations(true)
    .Editing(editing =>
    {
        editing.RefreshMode(GridEditRefreshMode.Reshape);
        editing.Mode(GridEditMode.Row); 
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.UseIcons(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(x => x.BasketId).Caption("Id");
        columns.AddFor(x => x.OrderDto.OrderInfoDto.OrderNumber).Caption("Reference");
        columns.AddFor(x => x.BasketInfoDto.DateTime).Caption("Date").Format("dd.MM.yyyy HH:mm:ss"); 
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
                
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add().Name(GridColumnButtonName.Delete);
                b.Add()
                    .Icon("fa-solid fa-right-left")
                    .Hint("Send basket data to client")
                    .OnClick("onSendBasketToClient");
            }); 
    })
    .Paging(paging => paging.PageSize(10))
    .FilterRow(filterRow => filterRow.Visible(true))
    .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("order-item-template"))
    ) 
)





@using (Html.DevExtreme().NamedTemplate("order-item-template"))
{
    @(Html.DevExtreme().DataGrid<OrderItemDto>()
        .DataSource(d => d.Mvc()
            .Controller("OrderItems")
            .LoadAction("Get")
            .UpdateAction("Update")
            .LoadParams(new { basketId = new JS("data.BasketId") })
            .Key("ArticleNumber")
        )
        .RepaintChangesOnly(true) 
        .Scrolling(x => x.Mode(GridScrollingMode.Virtual)) 
        .RemoteOperations(true)
        .Editing(editing =>
        {
            editing.RefreshMode(GridEditRefreshMode.Reshape);
            editing.Mode(GridEditMode.Row); 
            editing.AllowUpdating(true);
            editing.UseIcons(true);
        })
        .Columns(columns => {
            columns.AddFor(n => n.ArticleNumber).Caption("Article");
            columns.AddFor(n => n.Quantity).Caption("Quantity").Format(format =>
            {
                format.Type(Format.Decimal);
                format.Precision(2);
            });
            columns.AddFor(n => n.OfferPrice).Caption("Offer").Format(format =>
            {
                format.Type(Format.Currency);
                format.Currency("EUR");
                format.Precision(2);
            });
            columns.AddFor(n => n.NetPrice).Caption("Net").Format(format =>
            {
                format.Type(Format.Currency);
                format.Currency("EUR");
                format.Precision(2);
            });
            columns.AddFor(n => n.PriceBasis).Caption("Basis").Format(format =>
            {
                format.Type(Format.Currency);
                format.Currency("EUR");
                format.Precision(2);
            });
            columns.AddFor(n => n.Vat).Caption("VAT").Format(format =>
            {
                format.Type(Format.Percent);
                format.Precision(2);
            });
                columns.AddFor(n => n.Supplement).Caption("Supplement").Format(format =>
            {
                format.Type(Format.Currency);
                format.Currency("EUR");
                format.Precision(2);
            });
        })
        .ShowBorders(true))
}


@(Html.DevExtreme().Toast()
    .ID("toast")
    .Width(300)
    .DisplayTime(4000)
)


<script>

    function onSendBasketToClient(event) {
          const rowData = event.row.data.RawXml;
          const hookUrl = event.row.data.HookUrl;
          sendToClient(rowData,hookUrl);
          // e.event.preventDefault();
    }

    function sendToClient(xmlData, hookUrl) {
        fetch('/api/baskets/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/xml',
                    'Hook-Url': hookUrl
                },
                body: xmlData
            })
            .then(response => response.json())
            .then(result => {
                console.log('Success:', result);
                const type = result.success === "true"? "success" :"error" ;
                const message = result.success === "true"? "Sending the data to the client successful" : "Error sending data to client";
                $("#toast").dxToast("instance").option({
                    type,
                    message,
                    visible: true
                });
            })
            .catch(error => {
                    console.error('Error:', error);
                    const type = "error";
                    const message = "Error sending data to client";
                    $("#toast").dxToast("instance").option({
                        type,
                        message,
                        visible: true
                    });
                }
            );
    }

 

</script>