@page
@using IdsServer.Library.Models

@{
    ViewData["Title"] = "Baskets";
}

<h2>@ViewData["Title"]</h2>


@(Html.DevExtreme().DataGrid<BasketDto>()
        .DataSource(ds => ds.Mvc()
            .Controller("Baskets")
            .LoadAction("Get")
            .DeleteAction("Delete")
            .Key("BasketId")
        )
        .RemoteOperations(true)
        .Editing(editing => {
            editing.Mode(GridEditMode.Row);
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.UseIcons(true);
        })
        .Columns(columns =>
        {
            columns.AddFor(x => x.BasketId).Caption("Id");
            columns.AddFor(x => x.OrderDto.OrderInfoDto.OrderNumber).Caption("Reference");
            columns.AddFor(x => x.BasketInfoDto.DateTime).Caption("Date").Format("dd.MM.yyyy HH:mm:ss");
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                
                .Buttons(b =>
                {
                    b.Add()
                        .Icon("fa-solid fa-right-left")
                        .Hint("Send basket data to client")
                        .OnClick("onSendBasketToClient");

                    b.Add().Name(GridColumnButtonName.Delete)
                        .Icon("fa-solid fa-trash")
                        .Hint("Delete basket from database");
                });

            @* columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add()
                        .Text("Show data")
                        
                        .Hint("Delete basket")
                        .OnClick("onShowRawBasketData");
                }); *@
        })
        .Paging(paging => paging.PageSize(10))
        .FilterRow(filterRow => filterRow.Visible(true))
        .MasterDetail(md => md
            .Enabled(true)
            .Template(@<text>
                @(Html.DevExtreme().DataGrid<OrderItemDto>()
                .DataSource(d => d.Mvc()
                .Controller("Baskets")
                .LoadAction("GetOrderItems")
                .LoadParams(new { basketId = new JS("data.BasketId") })
                )
                .Columns(columns => {
                    columns.AddFor(n => n.ArticleNumber).Caption("Article");
                    columns.AddFor(n => n.Quantity).Caption("Quantity").Format(format =>
                    {
                        format.Type(Format.Decimal);
                        format.Precision(2);
                    });
                    columns.AddFor(n => n.OfferPrice).Caption("Offer").Format(format =>
                    {
                        format.Type(Format.Currency);
                        format.Currency("EUR");
                        format.Precision(2);
                    });
                    columns.AddFor(n => n.NetPrice).Caption("Net").Format(format =>
                    {
                        format.Type(Format.Currency);
                        format.Currency("EUR");
                        format.Precision(2);
                    });
                })
                .ShowBorders(true)
                )
            </text>)
        )
)




<script>

    function onSendBasketToClient(event) {
          const rowData = event.row.data.RawXml;
          const hookUrl = event.row.data.HookUrl;
          sendToClient(rowData,hookUrl);
          // e.event.preventDefault();
    }



 function sendToClient(xmlData, hookUrl) {
      fetch('/api/baskets/send', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/xml',
                  'Hook-Url': hookUrl
              },
              body: xmlData
          })
          .then(response => response.json())
          .then(result => {
                console.log('Success:', result);
          })
          .catch(error => {
              console.error('Error:', error);
          }
      );
    }


    function getRawBasket(basketId) {

        const url = `/api/baskets/raw?basketId=${encodeURIComponent(basketId)}`;

        fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Fehler bei der Anfrage: ${response.status}`);
                }
                return response.json(); 
            })
            .then(data => {

            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
</script>