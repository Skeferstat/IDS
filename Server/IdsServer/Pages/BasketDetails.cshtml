@page "{id:guid}"
@using BasketReceive
@using IdsServer.Database.Models
@model IdsServer.Pages.BasketDetailsModel

<h3>BasketDetails</h3>



@(Html.DevExtreme().DataGrid<Basket>()
    .DataSource(ds => ds.Mvc()
        .Controller("Baskets")
        .LoadAction("GetBasket")
        .LoadParams(new { basketId = Model.Id })
        .UpdateAction("Update")
        .Key("Id")
    )
    .RepaintChangesOnly(true) 
    .Scrolling(x => x.Mode(GridScrollingMode.Virtual)) 
    .RemoteOperations(true)
    .Editing(editing =>
    {
        editing.RefreshMode(GridEditRefreshMode.Reshape);
        editing.Mode(GridEditMode.Row); 
        editing.AllowUpdating(true);
        editing.UseIcons(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(x => x.RawBasket.Order.OrderInfo.PartNo).Caption("Reference");
        columns.AddFor(x => x.RawBasket.WarenkorbInfo.Date).Caption("Date").Format("dd.MM.yyyy");
        columns.AddFor(x => x.RawBasket.WarenkorbInfo.Time)
            .Format("HH:mm:ss")
            .DataType(GridColumnDataType.DateTime)
            .Caption("Time")
            .EditorOptions(new { type = "time", displayFormat = "HH:mm:ss", calendarOptions = new { visible = false } });
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
                
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add()
                    .Icon("fa-solid fa-right-left")
                    .Hint("Send basket data to client")
                    .OnClick("onSendBasketToClient");
            }); 
    })
    .OnContentReady("onContentReady")
    .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("basket-item-template"))
    )
)




@using (Html.DevExtreme().NamedTemplate("basket-item-template"))
{
    @(Html.DevExtreme().DataGrid<typeOrderItem>()
            .DataSource(d => d.Mvc()
                .Controller("OrderItems")
                .LoadAction("Get")
                .UpdateAction("Update")
                .DeleteAction("Delete")
                .InsertAction("Insert")
                .LoadParams(new { basketId = new JS("data.Id") })
                .OnRemoving("function(event) {onOrderItemRemoving(event, data.Id)}")
                .OnInserting("function(event) {onOrderItemInserting(event, data.Id)}")
                .OnBeforeSend("onBeforeSend")
                .Key("ArtNo")
            )
            .OnRowUpdating("function(event) {onOrderItemUpdating(event, data.Id)}")
            .RepaintChangesOnly(true)
            .Scrolling(x => x.Mode(GridScrollingMode.Virtual))
            .Selection(s => s.Mode(SelectionMode.Single))
            .RowAlternationEnabled(true)
            .RemoteOperations(true)
            .Editing(editing =>
            {
                editing.RefreshMode(GridEditRefreshMode.Reshape);
                editing.Mode(GridEditMode.Row);
                editing.AllowUpdating(true);
                editing.AllowDeleting(true);
                editing.AllowAdding(true);
                editing.UseIcons(true);
            })
            .Columns(columns =>
            {
                columns.AddFor(n => n.ArtNo).Caption("Article").AllowSorting(true);
                columns.AddFor(n => n.Qty).Caption("Quantity").Format(format =>
                {
                    format.Type(Format.Decimal);
                    format.Precision(2);
                });
                columns.AddFor(n => n.OfferPrice).Caption("Offer").Format(format =>
                {
                    format.Type(Format.Currency);
                    format.Currency("EUR");
                    format.Precision(2);
                });
                columns.AddFor(n => n.NetPrice).Caption("Net").Format(format =>
                {
                    format.Type(Format.Currency);
                    format.Currency("EUR");
                    format.Precision(2);
                });
                columns.AddFor(n => n.PriceBasis).Caption("Basis").Format(format =>
                {
                    format.Type(Format.Currency);
                    format.Currency("EUR");
                    format.Precision(2);
                });
                columns.AddFor(n => n.VAT).Caption("VAT")
                    .CustomizeText("function(e) { return e.value + '%'; }")
                    .Format(format =>
                {
                    format.Precision(2);
                });
                columns.AddFor(n => n.Zuschlag).Caption("Supplement").Format(format =>
            {
                format.Type(Format.Currency);
                format.Currency("EUR");
                format.Precision(2);
            });
            })
            .ShowBorders(true))
}

@(Html.DevExtreme().Toast()
    .ID("toast")
    .Width(300)
    .DisplayTime(4000)
)

                
<script>


    let basketId;
    function onOrderItemRemoving(event,basketIdent) {
        basketId = basketIdent;
    } 

    function onOrderItemInserting(event,basketIdent) {
        basketId = basketIdent;
    } 

    function onBeforeSend(method, ajaxOptions) {  
        if ( (method === "delete" || method === "insert") && basketId) {
            ajaxOptions.data.basketId = basketId;
        }  
    } 

    let collapsed = false;
    function onContentReady(event) {
        if(!collapsed) {
            collapsed = true;
            if (event.component.getVisibleRows().length > 0) {
                let firstRowKey = event.component.getVisibleRows()[0].key;
                event.component.expandRow(firstRowKey);
            }
        }
    }

    function onOrderItemUpdating(event, basketId) {
        event.data = basketId;
    }

    function onSendBasketToClient(event) {
        const basketId = event.row.data.Id;
        sendToClient(basketId);
        // e.event.preventDefault();
    }

    function sendToClient(basketId) {
        fetch('/api/baskets/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ basketId: basketId }) 
            })
            .then(response => response.json())
            .then(result => {
                console.log('Success:', result);
                const type = result.success === "true"? "success" :"error" ;
                const message = result.success === "true"? "Sending the data to the client successful" : "Error sending data to client";
                $("#toast").dxToast("instance").option({
                    type,
                    message,
                    visible: true
                });
            })
            .catch(error => {
                    console.error('Error:', error);
                    const type = "error";
                    const message = "Error sending data to client";
                    $("#toast").dxToast("instance").option({
                        type,
                        message,
                        visible: true
                    });
                }
            );
    }

</script>